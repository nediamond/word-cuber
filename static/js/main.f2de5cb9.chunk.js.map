{"version":3,"sources":["components/WordCuber.js","utils/cubifyWord.js","App.js","serviceWorker.js","index.js"],"names":["WordCuber","history","useHistory","query","URLSearchParams","useLocation","search","queryWord","get","decodedQueryWord","atob","decodeURI","React","useState","word","setWord","wordCube","length","spacedWord","split","join","odd","mid","Math","floor","retStr","repeat","i","reverse","cubifyWord","className","type","value","onChange","event","_word","target","delete","set","btoa","replace","pathname","toString","text","class","window","location","href","App","basename","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAUe,SAASA,IAAa,IAAD,EAC3BC,EAAUC,cAEVC,EANC,IAAIC,gBAAgBC,cAAcC,QAQnCC,EAAS,UAAGJ,EAAMK,IADP,YACF,QAA0B,GACnCC,EAAmBC,KAAKC,UAAUJ,IANP,EAQXK,IAAMC,SAASJ,GARJ,mBAQ5BK,EAR4B,KAQtBC,EARsB,KAuB3BC,ECjCM,SAAoBF,GAChC,GAAIA,EAAKG,OAAS,EAAG,OAAOH,EAO5B,IALA,IAAMI,EAAaJ,EAAKK,MAAM,IAAIC,KAAK,KACjCC,EAAMP,EAAKG,OAAS,EACpBK,EAAMC,KAAKC,MAAMV,EAAKG,OAAS,GACjCQ,EAAS,IAAIC,OAAO,EAAIJ,GAAOJ,EAAa,KAEvCS,EAAI,EAAGA,EAAIL,EAAKK,IACtBF,GAAU,IAAIC,OAAO,GAAKJ,EAAMK,IAChCF,GAAU,KACVA,GAAU,IAAIC,OAAO,GAAKC,EAAI,IAC9BF,GAAUX,EAAKa,GACfF,GAAU,IAAIC,OAAO,GAAKZ,EAAKG,OAASU,EAAI,GAAK,GACjDF,GAAU,KACVA,GAAU,IAAIC,OAAO,GAAKC,EAAI,IAC9BF,GAAUX,EAAKA,EAAKG,OAASU,EAAI,GAEjCF,GAAU,KAGbA,GAAUP,EACVO,GAAU,IAAIC,OAAO,EAAIJ,EAAM,GAC/BG,GAAUX,EAAKQ,GAAQR,EAAKG,OAAS,GAAK,GAAM,KAEhD,IAAK,IAAIU,EAAI,EAAGA,EAAIL,EAAM,EAAID,EAAKM,IAChCF,GAAUX,EAAKa,GACfF,GAAU,IAAIC,OAAO,GAAKJ,EAAM,GAAK,GACrCG,GAAUX,EAAKQ,EAAMK,GACrBF,GAAU,IAAIC,OAAO,GAAKZ,EAAKG,OAASK,EAAM,GAAK,GACnDG,GAAUX,EAAKA,EAAKG,OAASU,EAAI,GACjCF,GAAU,IAAIC,OAAO,GAAKJ,EAAM,GAAK,GACrCG,GAAUX,EAAKA,EAAKG,OAASK,EAAMK,EAAI,GAEvCF,GAAU,KAGbA,GAAUX,EAAKQ,EAAM,EAAID,GACzBI,GAAU,IAAIC,OAAO,GAAKJ,EAAM,GAAK,GACrCG,GAAUP,EAAWC,MAAM,IAAIS,UAAUR,KAAK,IAAM,KAEpD,IAAK,IAAIO,EAAI,EAAGA,EAAIb,EAAKG,OAASK,EAAM,EAAID,EAAKM,IAC9CF,GAAUX,EAAKQ,EAAMK,EAAIN,GACzBI,GAAU,IAAIC,OAAO,GAAKJ,EAAMK,EAAI,IACpCF,GAAU,KACVA,GAAU,IAAIC,OAAO,GAAKJ,EAAMK,EAAI,GAAK,EAAIN,GACzCA,IAAOI,GAAU,KACrBA,GAAUX,EAAKA,EAAKG,OAASK,EAAMK,EAAI,EAAIN,GAC3CI,GAAU,IAAIC,OAAO,GAAKJ,EAAMK,EAAI,IACpCF,GAAU,KACVA,GAAU,KAKb,OAFAA,GAAUP,EAAWC,MAAM,IAAIS,UAAUR,KAAK,IAAM,KDpBnCS,CAAWf,GAC5B,OACG,yBAAKgB,UAAU,mBACZ,yBAAKA,UAAU,uCACZ,2BAAOA,UAAU,eAAeC,KAAK,OAAOC,MAAOlB,EAAMmB,SAjBzC,SAACC,GACvB,IAAMC,EAAQD,EAAME,OAAOJ,MAEb,KAAVG,EACDhC,EAAMkC,OAVK,KAYXlC,EAAMmC,IAZK,IAYSC,KAAKJ,IAE5BlC,EAAQuC,QAAQ,CAAEC,SAAU,IAAKnC,OAAQ,IAAMH,EAAMuC,aAErD3B,EAAQoB,MAQF,kBAAC,kBAAD,CAAiBQ,KAAM3B,GAAU,4BAAQ4B,MAAM,qBAAoB,uBAAGA,MAAM,iBAC5E,kBAAC,kBAAD,CAAiBD,KAAME,OAAOC,SAASC,MAAM,4BAAQH,MAAM,qBAAoB,uBAAGA,MAAM,kBAE3F,6BACG,6BAAM5B,KE9BHgC,MARf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,KACtB,kBAACjD,EAAD,QCKckD,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2de5cb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport cubifyWord from '../utils/cubifyWord';\r\nimport '../App.css';\r\n\r\nfunction useQuery() {\r\n   return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default function WordCuber() {\r\n   const history = useHistory();\r\n\r\n   const query = useQuery();\r\n   const WORD_KEY = 'w';\r\n   const queryWord = query.get(WORD_KEY) ?? '';\r\n   const decodedQueryWord = atob(decodeURI(queryWord));\r\n\r\n   let [word, setWord] = React.useState(decodedQueryWord);\r\n\r\n   const handleWordChange = (event) => {\r\n      const _word = event.target.value;\r\n\r\n      if (_word === '') {\r\n         query.delete(WORD_KEY);\r\n      } else {\r\n         query.set(WORD_KEY, btoa(_word));\r\n      }\r\n      history.replace({ pathname: '/', search: '?' + query.toString() });\r\n\r\n      setWord(_word);\r\n   }\r\n\r\n   const wordCube = cubifyWord(word);\r\n   return (\r\n      <div className='container-fluid'>\r\n         <nav className='navbar navbar-expand-lg navbar-dark'>\r\n            <input className='mx-auto my-5' type='text' value={word} onChange={handleWordChange}></input>\r\n            <CopyToClipboard text={wordCube}><button class=\"btn btn-dark ml-1\"><i class=\"fa fa-cube\"></i></button></CopyToClipboard>\r\n            <CopyToClipboard text={window.location.href}><button class=\"btn btn-dark ml-1\"><i class=\"fa fa-link\"></i></button></CopyToClipboard>\r\n         </nav>\r\n         <div>\r\n            <pre>{wordCube}</pre>\r\n         </div>\r\n      </div>\r\n   )\r\n}","export default function cubifyWord(word) {\r\n   if (word.length < 2) return word;\r\n\r\n   const spacedWord = word.split('').join(' ');\r\n   const odd = word.length % 2;\r\n   const mid = Math.floor(word.length / 2);\r\n   let retStr = ' '.repeat(2 * mid) + spacedWord + '\\n';\r\n\r\n   for (let i = 1; i < mid; i++) {\r\n      retStr += ' '.repeat(2 * (mid - i));\r\n      retStr += '/ ';\r\n      retStr += ' '.repeat(2 * (i - 1));\r\n      retStr += word[i];\r\n      retStr += ' '.repeat(2 * (word.length - i - 1) - 1);\r\n      retStr += '/ ';\r\n      retStr += ' '.repeat(2 * (i - 1));\r\n      retStr += word[word.length - i - 1]\r\n\r\n      retStr += '\\n';\r\n   }\r\n\r\n   retStr += spacedWord\r\n   retStr += ' '.repeat(2 * mid - 1);\r\n   retStr += word[mid - ((word.length + 1) % 2)] + '\\n'\r\n\r\n   for (let i = 1; i < mid - 1 + odd; i++) {\r\n      retStr += word[i];\r\n      retStr += ' '.repeat(2 * (mid - 1) + 1);\r\n      retStr += word[mid + i];\r\n      retStr += ' '.repeat(2 * (word.length - mid - 2) + 1);\r\n      retStr += word[word.length - i - 1];\r\n      retStr += ' '.repeat(2 * (mid - 1) + 1);\r\n      retStr += word[word.length - mid - i - 1]\r\n\r\n      retStr += '\\n';\r\n   }\r\n\r\n   retStr += word[mid - 1 + odd];\r\n   retStr += ' '.repeat(2 * (mid - 1) + 1);\r\n   retStr += spacedWord.split('').reverse().join('') + '\\n'\r\n\r\n   for (let i = 0; i < word.length - mid - 1 - odd; i++) {\r\n      retStr += word[mid + i + odd];\r\n      retStr += ' '.repeat(2 * (mid - i - 2));\r\n      retStr += ' /';\r\n      retStr += ' '.repeat(2 * (mid + i - 1) + 1 + odd);\r\n      if (odd) { retStr += ' '; }\r\n      retStr += word[word.length - mid - i - 1 - odd];\r\n      retStr += ' '.repeat(2 * (mid - i - 2));\r\n      retStr += ' /';\r\n      retStr += '\\n';\r\n   }\r\n\r\n   retStr += spacedWord.split('').reverse().join('') + '\\n';\r\n\r\n   return retStr;\r\n}","import React from 'react';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport WordCuber from './components/WordCuber';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename='/'>\r\n      <WordCuber />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}